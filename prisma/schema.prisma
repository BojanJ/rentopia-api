// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum PropertyType {
  apartment
  house
  condo
  studio
  villa
  other
}

enum PropertyStatus {
  active
  inactive
  maintenance
}

enum ServiceType {
  cleaning
  maintenance
  landscaping
  plumbing
  electrical
  hvac
  other
}

enum BookingStatus {
  pending
  confirmed
  checked_in
  checked_out
  cancelled
  no_show
}

enum PaymentStatus {
  pending
  partial
  paid
  refunded
}

enum TaskType {
  cleaning
  repair
  inspection
  preventive
  emergency
  other
}

enum TaskStatus {
  scheduled
  in_progress
  completed
  cancelled
  overdue
}

enum TaskPriority {
  low
  medium
  high
  urgent
}

enum TaskPaymentStatus {
  not_applicable
  pending
  paid
}

// Models
model User {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  email        String   @unique @db.VarChar(255)
  passwordHash String   @map("password_hash") @db.VarChar(255)
  firstName    String   @map("first_name") @db.VarChar(100)
  lastName     String   @map("last_name") @db.VarChar(100)
  phone        String?  @db.VarChar(20)
  timezone     String   @default("UTC") @db.VarChar(50)
  createdAt    DateTime @default(now()) @map("created_at")
  updatedAt    DateTime @updatedAt @map("updated_at")

  // Relations
  properties       Property[]
  serviceProviders ServiceProvider[]

  @@map("users")
}

model Property {
  id             String         @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId         String         @map("user_id") @db.Uuid
  name           String         @db.VarChar(200)
  description    String?
  addressLine1   String         @map("address_line1") @db.VarChar(255)
  addressLine2   String?        @map("address_line2") @db.VarChar(255)
  city           String         @db.VarChar(100)
  state          String?        @db.VarChar(100)
  postalCode     String?        @map("postal_code") @db.VarChar(20)
  country        String         @db.VarChar(100)
  propertyType   PropertyType   @map("property_type")
  bedrooms       Int
  bathrooms      Decimal        @db.Decimal(2, 1)
  maxOccupancy   Int            @map("max_occupancy")
  squareFeet     Int?           @map("square_feet")
  amenities      String[]
  houseRules     String?        @map("house_rules")
  checkInTime    DateTime?      @default(dbgenerated("'15:00:00'::time")) @map("check_in_time") @db.Time
  checkOutTime   DateTime?      @default(dbgenerated("'11:00:00'::time")) @map("check_out_time") @db.Time
  basePrice      Decimal        @map("base_price") @db.Decimal(10, 2)
  cleaningFee    Decimal        @default(0) @map("cleaning_fee") @db.Decimal(8, 2)
  securityDeposit Decimal       @default(0) @map("security_deposit") @db.Decimal(10, 2)
  status         PropertyStatus @default(active)
  icalUrl        String?        @map("ical_url") @db.VarChar(500) // Calendar sync URL
  lastSyncAt     DateTime?      @map("last_sync_at") // Last successful sync timestamp
  syncEnabled    Boolean        @default(false) @map("sync_enabled") // Enable/disable auto sync
  createdAt      DateTime       @default(now()) @map("created_at")
  updatedAt      DateTime       @updatedAt @map("updated_at")

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  images           PropertyImage[]
  bookings         Booking[]
  maintenanceTasks MaintenanceTask[]

  @@map("properties")
}

model PropertyImage {
  id           String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyId   String   @map("property_id") @db.Uuid
  imageUrl     String   @map("image_url") @db.VarChar(500)
  altText      String?  @map("alt_text") @db.VarChar(255)
  displayOrder Int      @default(0) @map("display_order")
  isPrimary    Boolean  @default(false) @map("is_primary")
  createdAt    DateTime @default(now()) @map("created_at")

  // Relations
  property Property @relation(fields: [propertyId], references: [id], onDelete: Cascade)

  @@map("property_images")
}

model ServiceProvider {
  id           String      @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  userId       String      @map("user_id") @db.Uuid
  name         String      @db.VarChar(200)
  companyName  String?     @map("company_name") @db.VarChar(200)
  serviceType  ServiceType @map("service_type")
  phone        String?     @db.VarChar(20)
  email        String?     @db.VarChar(255)
  addressLine1 String?     @map("address_line1") @db.VarChar(255)
  addressLine2 String?     @map("address_line2") @db.VarChar(255)
  city         String?     @db.VarChar(100)
  state        String?     @db.VarChar(100)
  postalCode   String?     @map("postal_code") @db.VarChar(20)
  hourlyRate   Decimal?    @map("hourly_rate") @db.Decimal(8, 2)
  flatRate     Decimal?    @map("flat_rate") @db.Decimal(10, 2)
  notes        String?
  isActive     Boolean     @default(true) @map("is_active")
  createdAt    DateTime    @default(now()) @map("created_at")
  updatedAt    DateTime    @updatedAt @map("updated_at")

  // Relations
  user             User              @relation(fields: [userId], references: [id], onDelete: Cascade)
  maintenanceTasks MaintenanceTask[]

  @@map("service_providers")
}

model Booking {
  id              String        @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyId      String        @map("property_id") @db.Uuid
  guestName       String        @map("guest_name") @db.VarChar(200)
  guestEmail      String?       @map("guest_email") @db.VarChar(255)
  guestPhone      String?       @map("guest_phone") @db.VarChar(20)
  numberOfGuests  Int           @map("number_of_guests")
  checkInDate     DateTime      @map("check_in_date") @db.Date
  checkOutDate    DateTime      @map("check_out_date") @db.Date
  nightsCount     Int?          @map("nights_count") // This will be calculated in application logic
  baseAmount      Decimal       @map("base_amount") @db.Decimal(10, 2)
  cleaningFee     Decimal       @default(0) @map("cleaning_fee") @db.Decimal(8, 2)
  taxes           Decimal       @default(0) @db.Decimal(8, 2)
  totalAmount     Decimal       @map("total_amount") @db.Decimal(10, 2)
  securityDeposit Decimal       @default(0) @map("security_deposit") @db.Decimal(10, 2)
  bookingStatus   BookingStatus @default(pending) @map("booking_status")
  paymentStatus   PaymentStatus @default(pending) @map("payment_status")
  specialRequests String?       @map("special_requests")
  internalNotes   String?       @map("internal_notes")
  bookingSource   String?       @map("booking_source") @db.VarChar(100)
  externalId      String?       @map("external_id") @db.VarChar(200) // External booking ID from calendar
  confirmationCode String?      @unique @map("confirmation_code") @db.VarChar(50)
  createdAt       DateTime      @default(now()) @map("created_at")
  updatedAt       DateTime      @updatedAt @map("updated_at")

  // Relations
  property         Property          @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  maintenanceTasks MaintenanceTask[]
  payments         BookingPayment[]

  @@map("bookings")
}

model MaintenanceTask {
  id                  String            @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  propertyId          String            @map("property_id") @db.Uuid
  bookingId           String?           @map("booking_id") @db.Uuid
  serviceProviderId   String?           @map("service_provider_id") @db.Uuid
  taskType            TaskType          @map("task_type")
  title               String            @db.VarChar(200)
  description         String?
  scheduledDate       DateTime          @map("scheduled_date") @db.Date
  scheduledTime       DateTime?         @map("scheduled_time") @db.Time
  estimatedDuration   Int?              @map("estimated_duration") // in minutes
  actualStartTime     DateTime?         @map("actual_start_time")
  actualEndTime       DateTime?         @map("actual_end_time")
  taskStatus          TaskStatus        @default(scheduled) @map("task_status")
  priority            TaskPriority      @default(medium)
  estimatedCost       Decimal?          @map("estimated_cost") @db.Decimal(8, 2)
  actualCost          Decimal?          @map("actual_cost") @db.Decimal(8, 2)
  paymentStatus       TaskPaymentStatus @default(not_applicable) @map("payment_status")
  completionNotes     String?           @map("completion_notes")
  photos              String[]
  isRecurring         Boolean           @default(false) @map("is_recurring")
  recurringInterval   Int?              @map("recurring_interval") // days between recurrence
  nextRecurringDate   DateTime?         @map("next_recurring_date") @db.Date
  createdAt           DateTime          @default(now()) @map("created_at")
  updatedAt           DateTime          @updatedAt @map("updated_at")
  completedAt         DateTime?         @map("completed_at")

  // Relations
  property        Property         @relation(fields: [propertyId], references: [id], onDelete: Cascade)
  booking         Booking?         @relation(fields: [bookingId], references: [id], onDelete: SetNull)
  serviceProvider ServiceProvider? @relation(fields: [serviceProviderId], references: [id], onDelete: SetNull)
  payments        TaskPayment[]

  @@map("maintenance_tasks")
}

model TaskPayment {
  id                String          @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  maintenanceTaskId String          @map("maintenance_task_id") @db.Uuid
  amount            Decimal         @db.Decimal(8, 2)
  paymentDate       DateTime        @map("payment_date") @db.Date
  paymentMethod     String?         @map("payment_method") @db.VarChar(50)
  referenceNumber   String?         @map("reference_number") @db.VarChar(100)
  notes             String?
  createdAt         DateTime        @default(now()) @map("created_at")

  // Relations
  maintenanceTask MaintenanceTask @relation(fields: [maintenanceTaskId], references: [id], onDelete: Cascade)

  @@map("task_payments")
}

model BookingPayment {
  id              String   @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  bookingId       String   @map("booking_id") @db.Uuid
  amount          Decimal  @db.Decimal(10, 2)
  paymentDate     DateTime @map("payment_date") @db.Date
  paymentType     String   @map("payment_type") @db.VarChar(50)
  paymentMethod   String?  @map("payment_method") @db.VarChar(50)
  referenceNumber String?  @map("reference_number") @db.VarChar(100)
  notes           String?
  createdAt       DateTime @default(now()) @map("created_at")

  // Relations
  booking Booking @relation(fields: [bookingId], references: [id], onDelete: Cascade)

  @@map("booking_payments")
}
